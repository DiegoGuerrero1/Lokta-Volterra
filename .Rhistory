source("~/.active-rstudio-document", echo=TRUE)
install.packages('gauseR')
knitr::opts_chunk$set(echo = TRUE)
library(gauseR)
data("gause_1934_science_f02_03")
Paramecium_caudatum = gause_1934_science_f02_03
View(gause_1934_science_f02_03)
knitr::opts_chunk$set(echo = TRUE)
plot(Volume_Species1~Day.data=Paramecium_caudatum)
plot(Volume_Species1~Day.data<-Paramecium_caudatum)
gause_1934_science_f02_03
plot(Paramecium_caudatum.Volume_Species1~Day.data=Paramecium_caudatum)
plot(Paramecium_caudatum.Volume_Species1~Day.data)
plot(Paramecium_caudatum$Volume_Species1~Day.data)
knitr::opts_chunk$set(echo = TRUE)
require(gauseR)
data("gause_1934_science_f02_03")
Paramecium_caudatum = gause_1934_science_f02_03
Paramecium_caudatum = gause_1934_science_f02_03[gause_1934_science_f02_03$Treatment == "Pc",]
Paramecium_caudatum <- gause_1934_science_f02_03[gause_1934_science_f02_03$Treatment == "Pc",]
View(Paramecium_caudatum)
names(Paramecium_caudatum)
plot(Paramecium_caudatum$Species1 ~ Paramecium_caudatum$Day)
?plot
library(ggplot2)
?ggplo
?ggplot
plot(Paramecium_caudatum$Species1 ~ Paramecium_caudatum$Day)
ggplot(Paramecium_caudatum, aes(Volume_Species1, Day))
ggplot(Paramecium_caudatum, aes(Day,Volume_Species1))
ggplot(Paramecium_caudatum)
plot(Paramecium_caudatum$Species1 ~ Paramecium_caudatum$Day)
ggplot(Paramecium_caudatum, aes(Day,Volume_Species1))
View(Paramecium_caudatum) #Checamos dataset, debería contener sólo datos de Paraceum caudatum.
data("gause_1934_science_f02_03")
Paramecium_caudatum <- gause_1934_science_f02_03[gause_1934_science_f02_03$Treatment == "Pc",]
names(Paramecium_caudatum) #Contiene columnas "Day" y "Volume_Species1"
ggplot(Paramecium_caudatum, aes(Day,Volume_Species1))
summary(gause_1934_science_f02_03)
#Exploramos nuestros datos
View(gause_1934_science_f02_03)
plot(data.frame(Paramecium_caudatum) $Species1 ~ Paramecium_caudatum$Day)
#Graficamos las columnas, volumen... (y) vs Day(x)
class(Paramecium_caudatum)
plot(Species1 ~ Day.data=Paramecium_caudatum)
plot(Species1 ~ Day.data==Paramecium_caudatum)
plot(Species1 ~ Day.data(Paramecium_caudatum))
ggplot(Paramecium_caudatum, aes(Day,Volume_Species1))
plot(Paramecium_caudatum$Volume_Species1~Paramecium_caudatum$)
plot(Paramecium_caudatum$Volume_Species1~Paramecium_caudatum$Day)
ggplot(Paramecium_caudatum, aes(Day,Volume_Species1))
plot(Paramecium_caudatum$Volume_Species1~Paramecium_caudatum$Day)
ggplot(Paramecium_caudatum, aes(Day, volume_Species1))
ggplot(Paramecium_caudatum, aes(Day, Volume_Species1))
ggplot(Paramecium_caudatum, aes(Day, Volume_Species1))+
?ggplot
ggplot(Paramecium_caudatum, aes(Day, Volume_Species1))+
?ggplot
ggplot(Paramecium_caudatum, aes(Day, Volume_Species1))+
?ggplot2
ggplot(Paramecium_caudatum, aes(Day, Volume_Species1))+
?ggplot
ggplot(Paramecium_caudatum, aes(Day, Volume_Species1))+
?ggplot()
ggplot(Paramecium_caudatum, aes(Day, Volume_Species1))+
? ggplot()
ggplot(Paramecium_caudatum, aes(Day, Volume_Species1))+
?ggplot2()
ggplot(Paramecium_caudatum, aes(Day, Volume_Species1))+
geom_abline()
ggplot(Paramecium_caudatum, aes(Day, Volume_Species1))+
geom_point()
plot(Paramecium_caudatum$Volume_Species1~Paramecium_caudatum$Day)
ggplot(Paramecium_caudatum, aes(Day, Volume_Species1))+
geom_point()
ggplot(Paramecium_caudatum, aes(Day, Volume_Species1))+
geom_contour()
ggplot(Paramecium_caudatum, aes(Day, Volume_Species1))+
geom_path()
ggplot(Paramecium_caudatum, aes(Day, Volume_Species1))+
geom_point()
knitr::opts_chunk$set(echo = TRUE)
library(gauseR)
require(gauseR)
library(ggplot2)
ggplot(Paramecium_caudatum, aes(Day, Volume_Species1))+
geom_path()+
scale_x_log10() + scale_y_log10()
ggplot(Paramecium_caudatum, aes(Day, Volume_Species1))+
geom_path() #graficamos con linea para ver mejor la tendencia de los datos
ggplot(Paramecium_caudatum, aes(Day, Volume_Species1))+
geom_path()+
scale_x_log10() + scale_y_log10()
ggplot(Paramecium_caudatum, aes(Day, Volume_Species1))+
geom_path()+
scale_y_log10()
ggplot(Paramecium_caudatum, aes(Day, Volume_Species1))+
geom_path()+
scale_y_sqrt()
ggplot(Paramecium_caudatum, aes(Day, Volume_Species1))+
geom_path() #graficamos con linea para ver mejor la tendencia de los datos
#Calculando abundancia retardada en tiempo usando el comando gat_lag de gauseR
?get_lag
lagged_data <- get_lag(x = Paramecium_caudatum$Volume_Species1, time = Paramecium_caudatum$Day)
summary(lagged_data)
lagged_data
Paramecium_caudatum$dNNdt <- percap_growth(x = lagged_data$x, laggedx = lagged_data$laggedx, dt = lagged_data$dt)
head(Paramecium_caudatum)
plot(Paramecium_caudatum$dNNdt ~ Paramecium_caudatum$Volume_Species1, xlab = "Abundancia de el retraso (N)", ylab = "tasa de crecimiento per-cápita (dN/Ndt)", xlim = c(0,250), ylim = c(0,1))
plot(Paramecium_caudatum$dNNdt ~ Paramecium_caudatum$Volume_Species1, xlab = "Abundancia del retraso (N)", ylab = "tasa de crecimiento per-cápita (dN/Ndt)", xlim = c(0,250), ylim = c(0,1))
ggplot(Paramecium_caudatum, axis(dNNdt, Volume_Species1))+
xlab("Abundancia del retraso (N)") + ylab("tasa de crecimiento per-cápita (dN/Ndt)")+
xlim(c(0,250), ylim = c(0,1))+
geom_point()
ggplot(Paramecium_caudatum, axis(dNNdt, Volume_Species1))+
xlab("Abundancia del retraso (N)") + ylab("tasa de crecimiento per-cápita (dN/Ndt)")+
xlim(c(0,250), ylim = c(0,1))+
geom_point()
plot(Paramecium_caudatum$dNNdt ~ Paramecium_caudatum$Volume_Species1, xlab = "Abundancia del retraso (N)", ylab = "tasa de crecimiento per-cápita (dN/Ndt)", xlim = c(0,250), ylim = c(0,1))
modelo_PC = lm(Paramecium_caudatum$Volume_Species1 ~ Paramecium_caudatum$dNNdt)
#Graficamos el modelo como una línea roja
abline(modelo_PC, lwd = 2, col = 2)
#Graficamos el modelo como una línea roja
plot(modelo_PC)
abline(modelo_PC, lwd = 2, col = 2)
#Graficamos el modelo como una línea roja
plot(modelo_PC)
#Graficamos el modelo como una línea roja
plot(modelo_PC)+ albine(lwd = 2, col = 2)
#Graficamos el modelo como una línea roja
plot(modelo_PC)+abline(modelo_PC, lwd= 2, col = 2)
#Graficamos el modelo como una línea roja
plot(modelo_PC)
#Graficamos el modelo como una línea roja
plot(modelo_PC)+abline(modelo_PC, lwd= 2, col = 2)
parametros_rsn <- coef(modelo_PC)
summary(Paramecium_caudatum)
# Transformamos los paráetros a una escala logística
par_logist <- c(r = unname(rsn_pars["(Intercept)"]),
K=unname(-rsn_pars["(Intercept)"]/rsn_pars["Volume_Species1"]))
knitr::opts_chunk$set(echo = TRUE)
modelo_nls <- nls(Volume_Species ~ get_logistic(time = Day, N0, r,K),
data = Paramecium_caudatum,
start = c(N0 = unname(Paramecium_caudatum$Volume_Species1[which.min(Paramecium_caudatum$Day)]), r = unname(par_logist["r"]), K = unname(par_logist["K"])))
# Transformamos los paráetros a una escala logística
par_logist <- c(r = unname(parametros_rsn["(Intercept)"]),
K=unname(-parametros_rsn["(Intercept)"]/parametros_rsn["Volume_Species1"]))
modelo_nls <- nls(Volume_Species ~ get_logistic(time = Day, N0, r,K),
data = Paramecium_caudatum,
start = c(N0 = unname(Paramecium_caudatum$Volume_Species1[which.min(Paramecium_caudatum$Day)]), r = unname(par_logist["r"]), K = unname(par_logist["K"])))
modelo_nls <- nls(Volume_Species1 ~ get_logistic(time = Day, N0, r,K),
data = Paramecium_caudatum,
start = c(N0 = unname(Paramecium_caudatum$Volume_Species1[which.min(Paramecium_caudatum$Day)]), r = unname(par_logist["r"]), K = unname(par_logist["K"])))
?get_logistic
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(gauseR)
require(gauseR)
library(ggplot2)
data("gause_1934_science_f02_03")
#Exploramos nuestros datos
View(gause_1934_science_f02_03)
summary(gause_1934_science_f02_03)
Paramecium_caudatum <- gause_1934_science_f02_03[gause_1934_science_f02_03$Treatment == "Pc",] #Creamos un subset de sólo los monocultivos de Paraceum Caudatum
View(Paramecium_caudatum) #Checamos dataset, debería contener sólo datos de Paraceum caudatum.
names(Paramecium_caudatum) #Contiene columnas "Day" y "Volume_Species1"
#Graficamos las columnas, volumen... (y) vs Day(x)
class(Paramecium_caudatum)
plot(Paramecium_caudatum$Volume_Species1~Paramecium_caudatum$Day) #Graficamos sin ggplot2
#Para visualizar mejor los datos se utilizará ggplot2.
ggplot(Paramecium_caudatum, aes(Day, Volume_Species1))+
geom_point() #graficamos con puntos por medio de ggplot2
ggplot(Paramecium_caudatum, aes(Day, Volume_Species1))+
geom_path() #graficamos con linea para ver mejor la tendencia de los datos
knitr::opts_chunk$set(echo = TRUE)
library(gauseR)
require(gauseR)
library(ggplot2)
data("gause_1934_science_f02_03")
#Exploramos nuestros datos
View(gause_1934_science_f02_03)
summary(gause_1934_science_f02_03)
Paramecium_caudatum <- gause_1934_science_f02_03[gause_1934_science_f02_03$Treatment == "Pc",] #Creamos un subset de sólo los monocultivos de Paraceum Caudatum
View(Paramecium_caudatum) #Checamos dataset, debería contener sólo datos de Paraceum caudatum.
names(Paramecium_caudatum) #Contiene columnas "Day" y "Volume_Species1"
#Graficamos las columnas, volumen... (y) vs Day(x)
class(Paramecium_caudatum)
plot(Paramecium_caudatum$Volume_Species1~Paramecium_caudatum$Day) #Graficamos sin ggplot2
#Para visualizar mejor los datos se utilizará ggplot2.
ggplot(Paramecium_caudatum, aes(Day, Volume_Species1))+
geom_point() #graficamos con puntos por medio de ggplot2
ggplot(Paramecium_caudatum, aes(Day, Volume_Species1))+
geom_path() #graficamos con linea para ver mejor la tendencia de los datos
#Calculando abundancia retardada en tiempo usando el comando gat_lag de gauseR
?get_lag
lagged_data <- get_lag(x = Paramecium_caudatum$Volume_Species1, time = Paramecium_caudatum$Day)
# Visualizamos los datos
summary(lagged_data)
lagged_data
# Calcualamos el crecimiento percápita (dNNdt) y lo guardamos en una coluna en el archivo de los datos. Paracium_caudatum
Paramecium_caudatum$dNNdt <- percap_growth(x = lagged_data$x, laggedx = lagged_data$laggedx, dt = lagged_data$dt)
#Visualizamos
head(Paramecium_caudatum)#Va está la nueva columna dNNdt
#Graficamos la relación
plot(Paramecium_caudatum$dNNdt ~ Paramecium_caudatum$Volume_Species1, xlab = "Abundancia del retraso (N)", ylab = "tasa de crecimiento per-cápita (dN/Ndt)", xlim = c(0,250), ylim = c(0,1))
#Encontramos una regresión lineal para los datos
modelo_PC = lm(Paramecium_caudatum$Volume_Species1 ~ Paramecium_caudatum$dNNdt)
#Graficamos el modelo como una línea roja
plot(modelo_PC)+abline(modelo_PC, lwd= 2, col = 2)
parametros_rsn <- coef(modelo_PC)
summary(Paramecium_caudatum)
# Transformamos los paráetros a una escala logística
par_logist <- c(r = unname(parametros_rsn["(Intercept)"]),
K=unname(-parametros_rsn["(Intercept)"]/parametros_rsn["Volume_Species1"]))
modelo_nls <- nls(Volume_Species1 ~ get_logistic(time = Day, N0, r,K),
data = Paramecium_caudatum,
start = c(N0 = unname(Paramecium_caudatum$Volume_Species1[which.min(Paramecium_caudatum$Day)]), r = unname(par_logist["r"]), K = unname(par_logist["K"])))
# Transformamos los paráetros a una escala logística
par_logist <- c(r = unname(parametros_rsn["(Intercept)"]),
K=unname(-parametros_rsn["(Intercept)"]/parametros_rsn["Volume_Species1"]))
parametros_rsn <- coef(modelo_PC)
# Transformamos los paráetros a una escala logística
par_logist <- c(r = unname(parametros_rsn["(Intercept)"]),
K=unname(-parametros_rsn["(Intercept)"]/parametros_rsn["Volume_Species1"]))
modelo_nls <- nls(Volume_Species1 ~ get_logistic(time = Day, N0, r,K),
data = Paramecium_caudatum,
start = c(N0 = unname(Paramecium_caudatum$Volume_Species1[which.min(Paramecium_caudatum$Day)]), r = unname(par_logist["r"]), K = unname(par_logist["K"])))
modelo_nls <- nls(Volume_Species1 ~ get_logistic(time = Day, N0, r,K),
data = Paramecium_caudatum,
start = c(N0 = unname(Paramecium_caudatum$Volume_Species1[which.min(Paramecium_caudatum$Day)]), r = unname(par_logist["r"]), K = unname(par_logist["K"])))
# Transformamos los paráetros a una escala logística
par_logist <- c(r = unname(parametros_rsn["(Intercept)"]),
K=unname(-parametros_rsn["(Intercept)"]/parametros_rsn["Volume_Species1"]))
modelo_nls <- nls(Volume_Species1 ~ get_logistic(time = Day, N0, r,K),
data = Paramecium_caudatum,
start = c(N0 = unname(Paramecium_caudatum$Volume_Species1[which.min(Paramecium_caudatum$Day)]), r = unname(par_logist["r"]), K = unname(par_logist["K"])))
library(gauseR)
require(gauseR)
library(ggplot2)
data("gause_1934_science_f02_03")
#Exploramos nuestros datos
View(gause_1934_science_f02_03)
summary(gause_1934_science_f02_03)
Paramecium_caudatum <- gause_1934_science_f02_03[gause_1934_science_f02_03$Treatment == "Pc",] #Creamos un subset de sólo los monocultivos de Paraceum Caudatum
View(Paramecium_caudatum) #Checamos dataset, debería contener sólo datos de Paraceum caudatum.
names(Paramecium_caudatum) #Contiene columnas "Day" y "Volume_Species1"
#Graficamos las columnas, volumen... (y) vs Day(x)
class(Paramecium_caudatum)
plot(Paramecium_caudatum$Volume_Species1~Paramecium_caudatum$Day) #Graficamos sin ggplot2
#Para visualizar mejor los datos se utilizará ggplot2.
ggplot(Paramecium_caudatum, aes(Day, Volume_Species1))+
geom_point() #graficamos con puntos por medio de ggplot2
ggplot(Paramecium_caudatum, aes(Day, Volume_Species1))+
geom_path() #graficamos con linea para ver mejor la tendencia de los datos
#Calculando abundancia retardada en tiempo usando el comando gat_lag de gauseR
?get_lag
lagged_data <- get_lag(x = Paramecium_caudatum$Volume_Species1, time = Paramecium_caudatum$Day)
# Visualizamos los datos
summary(lagged_data)
lagged_data
# Calcualamos el crecimiento percápita (dNNdt) y lo guardamos en una coluna en el archivo de los datos. Paracium_caudatum
Paramecium_caudatum$dNNdt <- percap_growth(x = lagged_data$x, laggedx = lagged_data$laggedx, dt = lagged_data$dt)
#Visualizamos
head(Paramecium_caudatum)#Va está la nueva columna dNNdt
#Graficamos la relación
plot(Paramecium_caudatum$dNNdt ~ Paramecium_caudatum$Volume_Species1, xlab = "Abundancia del retraso (N)", ylab = "tasa de crecimiento per-cápita (dN/Ndt)", xlim = c(0,250), ylim = c(0,1))
#Encontramos una regresión lineal para los datos
modelo_PC = lm(Paramecium_caudatum$Volume_Species1 ~ Paramecium_caudatum$dNNdt)
#Graficamos el modelo como una línea roja
plot(modelo_PC)+abline(modelo_PC, lwd= 2, col = 2)
parametros_rsn <- coef(modelo_PC)
summary(Paramecium_caudatum)
# Transformamos los paráetros a una escala logística
par_logist <- c(r = unname(parametros_rsn["(Intercept)"]),
K=unname(-parametros_rsn["(Intercept)"]/parametros_rsn["Volume_Species1"]))
parametros_rsn <- coef(modelo_PC)
summary(Paramecium_caudatum)
# Transformamos los paráetros a una escala logística
par_logist <- c(r = unname(parametros_rsn["(Intercept)"]),
K=unname(-parametros_rsn["(Intercept)"]/parametros_rsn["Volume_Species1"]))
modelo_nls <- nls(Volume_Species1 ~ get_logistic(time = Day, N0, r,K),
data = Paramecium_caudatum,
start = c(N0 = unname(Paramecium_caudatum$Volume_Species1[which.min(Paramecium_caudatum$Day)]), r = unname(par_logist["r"]), K = unname(par_logist["K"])))
?get_logistic
?get_logistic
udatum$Volume_Species1[which.min(Paramecium_caudatum$Day)]), r = unname(par_logist["r
modelo_nls <- nls(Volume_Species1 ~ get_logistic(time = Day, N0, r,K),
data = Paramecium_caudatum,
start = c(N0 = unname(Paramecium_caudatum$Volume_Species1[which.min(Paramecium_caudatum$Day)]), r = unname(par_logist["r"]), K = unname(par_logist["K"])))
modelo_nls <- nls(Volume_Species1 ~ get_logistic(time = Day, N0, r,K),
data = Paramecium_caudatum,
start = c(N0 = unname(Paramecium_caudatum$Volume_Species1[which.min(Paramecium_caudatum$Day)]), r = unname(par_logist["r"]), K = unname(par_logist["K"])))
modelo_nls <- nls(Volume_Species1 ~ get_logistic(time = Day, N0, r,K),
data = Paramecium_caudatum,
start = c(N0 = unname(Paramecium_caudatum$Volume_Species1[which.min(Paramecium_caudatum$Day)]), r = unname(par_logist["r"]), K = unname(par_logist["K"])))
?get_logistic
modelo_nls<-nls(Volume_Species1~get_logistic(time = Day, N0, r, K),
data=Paramecium_caudatum,
start=c(N0=unname(Pcmono$Volume_Species1[which.min(Paramecium_caudatum$Day)]),
r=unname(par_logist["r"]), K=unname(par_logist["K"])))
modelo_nls<-nls(Volume_Species1~get_logistic(time = Day, N0, r, K),
data=Paramecium_caudatum,
start=c(N0=unname(Paramecium_caudatum$Volume_Species1[which.min(Paramecium_caudatum$Day)]),
r=unname(par_logist["r"]), K=unname(par_logist["K"])))
parametros_rsn <- coef(modelo_PC)
# Transformamos los paráetros a una escala logística
par_logist <- c(r = unname(parametros_rsn["(Intercept)"]),
K=unname(-parametros_rsn["(Intercept)"]/parametros_rsn["Volume_Species1"]))
modelo_nls <- nls(Volume_Species1 ~ get_logistic(time = Day, N0, r,K),
data = Paramecium_caudatum,
start = c(N0 = unname(Paramecium_caudatum$Volume_Species1[which.min(Paramecium_caudatum$Day)]), r = unname(par_logist["r"]), K = unname(par_logist["K"])))
modelo_nls<-nls(Volume_Species1~get_logistic(time = Day, N0, r, K),
data=Paramecium_caudatum,
start=c(N0=unname(Paramecium_caudatum$Volume_Species1[which.min(Paramecium_caudatum$Day)]),
r=unname(par_logist["r"]), K=unname(par_logist["K"])))
modelo_PC = lm(dNNdt~ Volume_Species1, data = Paramecium_caudatum)
#Graficamos el modelo como una línea roja
plot(modelo_PC)+abline(modelo_PC, lwd= 2, col = 2)
parametros_rsn <- coef(modelo_PC)
# Transformamos los paráetros a una escala logística
par_logist <- c(r = unname(parametros_rsn["(Intercept)"]),
K=unname(-parametros_rsn["(Intercept)"]/parametros_rsn["Volume_Species1"]))
modelo_nls <- nls(Volume_Species1 ~ get_logistic(time = Day, N0, r,K),
data = Paramecium_caudatum,
start = c(N0 = unname(Paramecium_caudatum$Volume_Species1[which.min(Paramecium_caudatum$Day)]), r = unname(par_logist["r"]), K = unname(par_logist["K"])))
knitr::opts_chunk$set(echo = TRUE)
summary(modelo_nls)
plot(Volume_Species1 ~ Day, data = Paramecium_caudatum, type = "b", ylab = "P.caudatum Volume")
time_seq = seq(0,30,length = 100)
Ntest = get_logistic(time = time_seq, N0=coef(modelo_nls)["N0"],r=coef(modelo_nls)["r"],
K=coef(modelo_nls)["K"])
library(gauseR)
require(gauseR)
library(ggplot2)
Ntest = get_logistic(time = time_seq, N0=coef(modelo_nls)["N0"],r=coef(modelo_nls)["r"],
K=coef(modelo_nls)["K"])
lines(time_seq, Ntest, col="red")
plot(Volume_Species1 ~ Day, data = Paramecium_caudatum, type = "b", ylab = "P.caudatum Volume")
time_seq = seq(0,30,length = 100)
Ntest = get_logistic(time = time_seq, N0=coef(modelo_nls)["N0"],r=coef(modelo_nls)["r"],
K=coef(modelo_nls)["K"])
lines(time_seq, Ntest, col="red")
lines(time_seq, Ntest, col="red")
Ntest = get_logistic(time = time_seq, N0=coef(modelo_nls)["N0"],r=coef(modelo_nls)["r"],
K=coef(modelo_nls)["K"])
plot(Volume_Species1 ~ Day, data = Paramecium_caudatum, type = "b", ylab = "P.caudatum Volume")
lines(time_seq, Ntest, col="red")
Ntest = get_logistic(time = timesq, N0=coef(modelo_nls)["N0"],r=coef(modelo_nls)["r"],
K=coef(modelo_nls)["K"])
Ntest = get_logistic(time = time_seq, N0=coef(modelo_nls)["N0"],r=coef(modelo_nls)["r"],
K=coef(modelo_nls)["K"])
lines(time_seq, Ntest, col="red")
lines(time_seq, Ntest, col="red")
plot(Volume_Species1 ~ Day, data = Paramecium_caudatum, type = "b", ylab = "P.caudatum Volume")
lines(time_seq, Ntest, col="red")
plot(Volume_Species1 ~ Day, data = Paramecium_caudatum, type = "b", ylab = "P.caudatum Volume")+
lines(time_seq, Ntest, col="red")
#Graficamos el modelo como una línea roja
plot(Volume_Species1 ~ Day, data = Paramecium_caudatum, type = "b", ylab = "P.caudatum Volume")+
lines(time_seq, Ntest, col="red")+
label_parsed("Red line: Mathematical model", multi_line = T)
#Graficamos el modelo como una línea roja
plot(Volume_Species1 ~ Day, data = Paramecium_caudatum, type = "b", ylab = "P.caudatum Volume")+
lines(time_seq, Ntest, col="red")
text(-2, 2, "More text")
#Graficamos el modelo como una línea roja
plot(Volume_Species1 ~ Day, data = Paramecium_caudatum, type = "b", ylab = "P.caudatum Volume")+
lines(time_seq, Ntest, col="red")+ text(-2, 2, "More text")
#Graficamos el modelo como una línea roja
plot(Volume_Species1 ~ Day, data = Paramecium_caudatum, type = "b", ylab = "P.caudatum Volume")+
lines(time_seq, Ntest, col="red")+ text(5, 150, "More text")
#Graficamos el modelo como una línea roja
plot(Volume_Species1 ~ Day, data = Paramecium_caudatum, type = "b", ylab = "P.caudatum Volume")+
lines(time_seq, Ntest, col="red")+ text(5, 150, "Modelo")
#Graficamos el modelo como una línea roja
plot(Volume_Species1 ~ Day, data = Paramecium_caudatum, type = "b", ylab = "P.caudatum Volume")+
lines(time_seq, Ntest, col="red")+ text(5, 150, "Línea roja: Modelo")
#Graficamos el modelo como una línea roja
plot(Volume_Species1 ~ Day, data = Paramecium_caudatum, type = "b", ylab = "P.caudatum Volume")+
lines(time_seq, Ntest, col="red")+ text(5, 150, "Modelo")
#Graficamos el modelo como una línea roja
plot(Volume_Species1 ~ Day, data = Paramecium_caudatum, type = "b", ylab = "P.caudatum Volume")+
lines(time_seq, Ntest, col="red")+ text(5, 150, "Modelo", red)
#Graficamos el modelo como una línea roja
plot(Volume_Species1 ~ Day, data = Paramecium_caudatum, type = "b", ylab = "P.caudatum Volume")+
lines(time_seq, Ntest, col="red")+ text(5, 150, "Modelo")
model_test <- get_logistic(time = Paramecium_caudatum$Day, N0=coef(modelo_nls)[N0], r = coef(modelo_nls)["r"], K = coef(modelo_nls)["K"])
model_test <- get_logistic(time = Paramecium_caudatum$Day, N0=coef(modelo_nls)["N0"], r = coef(modelo_nls)["r"], K = coef(modelo_nls)["K"])
goodnesModelFit <- test_goodness_of_fit(observed = Paramecium_caudatum$Volume_Species1, predicted = model_test)
goodnesModelFit
### Análisis de *Paramecium aurelia* crecidas en monocultivo.
Paramecium_aurelia <- gause_1934_science_f02_03[gause_1934_science_f02_03$Treatment=="Pa"]
gause_1934_science_f02_03
View(gause_1934_science_f02_03)
plot(Volume_Species2 ~ Day, data = Paramecium_caudatum)
#Paraceum aurelia es la especie 2. Entonce no necesitamos volver a cargar los datos.
View(Paramecium_caudatum)
logistic_data = gause_1934_book_f22[gause_1934_book_f22$Treatment == "Pa",]
plot(Volume_Species2 ~ Day, data = logistic_data)
logistic_data
Paramecium_caudatum
logistic_data
Paramecium_Aurelia <- gause_1934_book_f22[gause_1934_book_f22$Treatment == "Pa",]
plot(Volume_Species2 ~ Day, data = Paramecium_Aurelia)
# Le damos un vistazo a los datos.
Paramecium_Aurelia
lagged_data_Pa <- get_lag(x = Paramecium_Aurelia$Volume_Species2, time = Paramecium_Aurelia$Day )
Paramecium_Aurelia$dNNdt <- percap_growth(x=lagged_data_Pa$x, laggedx = lagged_data_Pa$laggedx, dt = lagged_data_Pa$dt)
plot(Paramecium_Aurelia$dNNdt ~ Paramecium_Aurelia$Volume_Species2, xlab = "Abundacia retardada(N)", ylab = "Tasa de crecimiento per-cápita (dN/Ndt)", xlim = c(0,250), ylim= c(0,1))
plot(Paramecium_Aurelia$dNNdt ~ Paramecium_Aurelia$Volume_Species2, xlab = "Abundacia retrasada(N)", ylab = "Tasa de crecimiento per-cápita (dN/Ndt)", xlim = c(0,250), ylim= c(0,1))
modelo_Pa <- lm(dNNdt ~ Volume_Species2, data = Paramecium_Aurelia)
plot(modelo_Pa)+abline(modelo_Pa, lwd= 2, col = 2)
Pa_rsn <- coef(modelo_Pa)
sumary(Paramecium_Aurelia)
summary(Paramecium_Aurelia)
Pa_logistitPar <- c(r = unname(Pa_rsn["(Intercept)"]),
K=unname(-Pa_rsn["(Intercept)"]/Pa_rsn["Volume_Species1"]))
Pa_modelo_nls <- nls(Volume_Species2 ~ get_logistic(time = Day, N0, r,K),
data = Paramecium_Aurelia,
start = c(N0 = unname(Paramecium_Aurelia$Volume_Species2[which.min(Paramecium_Aurelia$Day)]), r = unname(par_logist["r"]), K = unname(par_logist["K"])))
summary(Pa_modelo_nls)
plot(Volume_Species2 ~ Day, data = Paramecium_Aurelia, type = "b", ylab = "volumen P.aurelia")+
lines(time_seq, Ntest, col="red")+ text(5, 150, "Modelo")
Pa_modelTest <- get_logistic(time = Paramecium_Aurelia$Day, N0=coef(Pa_modelo_nls)["N0"], r = coef(Pa_modelo_nls)["r"], K = coef(Pa_modelo_nls)["K"])
Pa_goodnes_fit <- test_goodness_of_fit(observed = Paramecium_Aurelia$Volume_Species2, predicted = Pa_modelTest)
Pa_goodnes_fit
knitr::opts_chunk$set(echo = TRUE)
# Paramecium_Aurelia -> Presa, Didinium nasutum -> Predador
#Los datos de P.aurelia ya están cargados, faltarían los de D.nasutum.
library(gauseR)
library(deSolve)
Paramecium_Aurelia
gause_1934_book_f32
View(gause_1934_book_f32)
Didinium_Nasutum <- gause_1934_book_f32 #No es necesario un filtro, ya que todo el dataset es para esas dos especies.
Names(Didinium_Nasutum)
names(Didinium_Nasutum)
plot(Individuals_Predator~Day, data = Didinium_Nasutum, type="b", ylab = "Volumen", xlab = "Tiempo (Días)",col="red") + lines(Individuals_Prey~Day, data = Didinium_Nasutum, col = "blue") + legend("topleft", c("Predador(D. nasutum)", "Presa (P. aurelia)"), fill = c("blue", "red"))
plot(Individuals_Predator~Day, data = Didinium_Nasutum, ylab = "Volumen", xlab = "Tiempo (Días)",col="red") + lines(Individuals_Prey~Day, data = Didinium_Nasutum, col = "blue") + legend("topleft", c("Predador(D. nasutum)", "Presa (P. aurelia)"), fill = c("blue", "red"))
plot(Individuals_Predator~Day, data = Didinium_Nasutum, type="b", ylab = "Volumen", xlab = "Tiempo (Días)",col="red") + lines(Individuals_Prey~Day, type = "b",data = Didinium_Nasutum, col = "blue") + legend("topleft", c("Predador(D. nasutum)", "Presa (P. aurelia)"), fill = c("blue", "red"))
plot(Individuals_Predator~Day, data = Didinium_Nasutum, type="b", ylab = "Volumen", xlab = "Tiempo (Días)",col="red") + lines(Individuals_Prey~Day, type = "b",data = Didinium_Nasutum, col = "blue") + legend(x = "left" , y= 40, c("Predador(D. nasutum)", "Presa (P. aurelia)"), fill = c("blue", "red"))
plot(Individuals_Predator~Day, data = Didinium_Nasutum, type="b", ylab = "Volumen", xlab = "Tiempo (Días)",col="red") + lines(Individuals_Prey~Day, type = "b",data = Didinium_Nasutum, col = "blue") + legend(x = "left" , y= 80, c("Predador(D. nasutum)", "Presa (P. aurelia)"), fill = c("blue", "red"))
plot(Individuals_Predator~Day, data = Didinium_Nasutum, type="b", ylab = "Volumen", xlab = "Tiempo (Días)",col="red") + lines(Individuals_Prey~Day, type = "b",data = Didinium_Nasutum, col = "blue") + legend("topleft", c("Predador(D. nasutum)", "Presa (P. aurelia)"), fill = c("blue", "red"))
plot(Individuals_Predator~Day, data = Didinium_Nasutum, type="b", ylab = "Volumen", xlab = "Tiempo (Días)",col="red") + lines(Individuals_Prey~Day, type = "b",data = Didinium_Nasutum, col = "blue") + legend("topcenter", c("Predador(D. nasutum)", "Presa (P. aurelia)"), fill = c("blue", "red"))
plot(Individuals_Predator~Day, data = Didinium_Nasutum, type="b", ylab = "Volumen", xlab = "Tiempo (Días)",col="red") + lines(Individuals_Prey~Day, type = "b",data = Didinium_Nasutum, col = "blue") + legend("", c("Predador(D. nasutum)", "Presa (P. aurelia)"), fill = c("blue", "red"))
plot(Individuals_Prey~Day, type = "b",data = Didinium_Nasutum, col = "blue") + lines(Individuals_Predator~Day, data = Didinium_Nasutum, type="b", ylab = "Volumen", xlab = "Tiempo (Días)",col="red") + legend("", c("Predador(D. nasutum)", "Presa (P. aurelia)"), fill = c("blue", "red"))
plot(Individuals_Prey~Day, type = "b",data = Didinium_Nasutum, col = "blue") + lines(Individuals_Predator~Day, data = Didinium_Nasutum, type="b", ylab = "Volumen", xlab = "Tiempo (Días)",col="red") + legend("topleft", c("Predador(D. nasutum)", "Presa (P. aurelia)"), fill = c("blue", "red"))
plot(Individuals_Prey~Day, type = "b",data = Didinium_Nasutum, col = "blue") + lines(Individuals_Predator~Day, data = Didinium_Nasutum, type="b", ylab = "Volumen", xlab = "Tiempo (Días)",col="red") + legend("toprigth", c("Predador(D. nasutum)", "Presa (P. aurelia)"), fill = c("blue", "red"))
plot(Individuals_Prey~Day, type = "b",data = Didinium_Nasutum, col = "blue") + lines(Individuals_Predator~Day, data = Didinium_Nasutum, type="b", ylab = "Volumen", xlab = "Tiempo (Días)",col="red") + legend("topright", c("Predador(D. nasutum)", "Presa (P. aurelia)"), fill = c("blue", "red"))
plot(Individuals_Prey~Day, type = "b",data = Didinium_Nasutum,  ylab = "Volumen", xlab = "Tiempo (Días)", col = "blue") + lines(Individuals_Predator~Day, data = Didinium_Nasutum, type="b",,col="red") + legend("topright", c("Predador(D. nasutum)", "Presa (P. aurelia)"), fill = c("blue", "red"))
plot(Individuals_Prey~Day, type = "b",data = Didinium_Nasutum,  ylab = "Volumen", xlab = "Tiempo (Días)", ylab = "Volumen", xlab = "Tiempo (Días)", col = "blue") + lines(Individuals_Predator~Day, data = Didinium_Nasutum, type="b",,col="red") + legend("topright", c("Predador(D. nasutum)", "Presa (P. aurelia)"), fill = c("blue", "red"))
plot(Individuals_Prey~Day, type = "b",data = Didinium_Nasutum, ylab = "Volumen", xlab = "Tiempo (Días)", col = "blue") + lines(Individuals_Predator~Day, data = Didinium_Nasutum, type="b",col="red") + legend("topright", c("Predador(D. nasutum)", "Presa (P. aurelia)"), fill = c("blue", "red"))
plot(Individuals_Prey~Day, type = "b",data = Didinium_Nasutum, ylab = "Volumen", xlab = "Tiempo (Días)", col = "blue") + lines(Individuals_Predator~Day, data = Didinium_Nasutum, type="b",col="red") + legend("topright", c("Predador(D. nasutum)", "Presa (P. aurelia)"), fill = c("blue", "red"))
plot(Individuals_Prey~Day,data = Didinium_Nasutum, ylab = "Volumen", xlab = "Tiempo (Días)", col = "blue") + lines(Individuals_Predator~Day, data = Didinium_Nasutum,col="red") + legend("topright", c("Predador(D. nasutum)", "Presa (P. aurelia)"), fill = c("blue", "red"))
plot(Individuals_Prey~Day, type = "b",data = Didinium_Nasutum, ylab = "Volumen", xlab = "Tiempo (Días)", col = "blue") + lines(Individuals_Predator~Day, data = Didinium_Nasutum, type="b",col="red") + legend("topright", c("Predador(D. nasutum)", "Presa (P. aurelia)"), fill = c("blue", "red"))
